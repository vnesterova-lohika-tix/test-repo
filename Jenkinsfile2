

node('master') {
    BUILD_TRIGGER_BY = sh ( script: "BUILD_BY=\$(curl -k --silent ${BUILD_URL}/api/xml | tr '<' '\n' | egrep '^userId>|^userName>' | sed 's/.*>//g' | sed -e '1s/\$/ \\/ /g'); if [[ -z \${BUILD_BY} ]]; then BUILD_BY=\$(curl -k --silent ${BUILD_URL}/api/xml | tr '<' '\n' | grep '^shortDescription>' | sed 's/.*user //g;s/.*by //g'); fi; echo \${BUILD_BY}", returnStdout: true ).trim()
echo "BUILD_TRIGGER_BY: ${BUILD_TRIGGER_BY}"
    parameters {
        string(name: 'BRANCH', defaultValue: 'master', description: 'Choose branch')
        choice(choices:['Freeze', 'Unfreeze'], description: 'Freeze or unfreeze branch from merging', name: 'ACTION')
    }

withCredentials([string(credentialsId: 'ORG_TOKEN', variable: 'ORG_TOKEN')]) {

        switch(params.ACTION) {
  case "Freeze":
            stage('Freezing') {

                sh """
 curl -d "frozen=true&user_name=bn" -X POST 'https://www.mergefreeze.com/api/branches/vnesterova-test-organization/repo1/$params.BRANCH/?access_token=$ORG_TOKEN'
"""
            
        }
    break
  case "Unfreeze":
            stage('Unfreezing') {
            if (env.ACTION == 'Unfreeze') {
                sh """
 curl -d "frozen=false&user_name=Valeriia Nesterova" -X POST 'https://www.mergefreeze.com/api/branches/vnesterova-test-organization/repo2/$params.BRANCH/?access_token=$ORG_TOKEN'
 """
               
            }
        }
    break
  default:
    result = "no such branch"
    break
}



}
}
