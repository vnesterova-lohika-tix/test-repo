BUILD_CAUSE_JSON=$(curl --silent ${BUILD_URL}/api/json | tr "{}" "\n" | grep "Started by")
BUILD_USER_ID=$(echo $BUILD_CAUSE_JSON | tr "," "\n" | grep "userId" | awk -F\" '{print $4}')
BUILD_USER_NAME=$(echo $BUILD_CAUSE_JSON | tr "," "\n" | grep "userName" | awk -F\" '{print $4}')



node('master') {
    parameters {
        string(name: 'BRANCH', defaultValue: 'master', description: 'Choose branch')
        choice(choices:['Freeze', 'Unfreeze'], description: 'Freeze or unfreeze branch from merging', name: 'ACTION')
    }

withCredentials([string(credentialsId: 'ORG_TOKEN', variable: 'ORG_TOKEN')]) {

        switch(params.ACTION) {
  case "Freeze":
            stage('Freezing') {

                sh """
 curl -d "frozen=true&user_name=$BUILD_USER_NAME" -X POST 'https://www.mergefreeze.com/api/branches/vnesterova-test-organization/repo1/$params.BRANCH/?access_token=$ORG_TOKEN'
"""
            
        }
    break
  case "Unfreeze":
            stage('Unfreezing') {
            if (env.ACTION == 'Unfreeze') {
                sh """
 curl -d "frozen=false&user_name=Valeriia Nesterova" -X POST 'https://www.mergefreeze.com/api/branches/vnesterova-test-organization/repo2/$params.BRANCH/?access_token=$ORG_TOKEN'
 """
               
            }
        }
    break
  default:
    result = "no such branch"
    break
}



}
}
